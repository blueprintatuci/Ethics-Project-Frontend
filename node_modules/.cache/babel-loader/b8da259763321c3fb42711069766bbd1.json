{"ast":null,"code":"var _jsxFileName = \"/Users/ainakin/Desktop/BLUEPRINT-ETHICS/Ethics-Project/frontend/src/Content.js\";\nimport React, { Component } from \"react\";\nimport Loading from \"./Loading\";\nimport axios from \"axios\";\nimport MediaCard from \"./Card\";\nimport \"./content.scss\";\nexport default class Header extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onUpdate = () => {\n      this.setState({\n        loading: true\n      }, () => {\n        axios.get(`https://ethic-blueprint.herokuapp.com/scrape_articles`).then(result => this.setState({\n          loading: false\n        })).catch(() => {\n          this.setState({\n            error: true\n          });\n          this.setState({\n            errorMsg: \"error scraping articles\"\n          });\n        });\n      });\n    };\n\n    this.getBlogId = blogname => {\n      return Object.keys(this.state.blogTableDict).find(key => this.state.blogTableDict[key] === blogname);\n    };\n\n    this.state = {\n      blogs: [\"\"],\n      // for dropdown\n      selectedBlog: \"\",\n      // for use in header title and other api calls\n      selectedBlogId: 0,\n      // for use in other api calls\n      unaddedArticles: [\"\"],\n      // for article cards\n      blogTableDict: {},\n      // blogid: blogname\n      loading: true,\n      // for when update is taking place\n      error: false,\n      errorMsg: \"None\",\n      addedArticle: false // flag for when an article is added \n\n    };\n  } // when rescrape is needed\n\n\n  componentDidMount() {\n    // get blog names and corresponding ids\n    axios.get(\"http://ethic-blueprint.herokuapp.com/blogs\").then(result => {\n      const arr = Object.keys(result.data).map(key => [key, result.data[key]]); // set first subtitle to first element in dropdown to initial page\n\n      this.setState(() => ({\n        selectedBlog: arr[0][1],\n        selectedBlogId: arr[0][0],\n        firstMount: false\n      })); // dictionary for blogtable to update state of id and name on dropdown\n\n      const dict = {};\n      arr.forEach(([key, value]) => dict[key] = value);\n      this.setState(() => ({\n        blogTableDict: dict\n      })); // create list of blog names for dropdown\n\n      const arr2 = Object.keys(result.data).map(key => result.data[key]);\n      this.setState(() => ({\n        blogs: arr2\n      })); // get articles to show up for selected blog\n\n      axios.get(`https://ethic-blueprint.herokuapp.com/unused_articles/` + this.state.selectedBlogId).then(result => {\n        this.setState(() => ({\n          unaddedArticles: result.data['articles']\n        }));\n      }).catch(() => {\n        this.setState({\n          error: true\n        });\n        this.setState({\n          errorMsg: \"error retreiving unused articles\"\n        });\n      });\n    }).catch(() => {\n      this.setState({\n        error: true\n      });\n      this.setState({\n        errorMsg: \"error retreiving blogs\"\n      });\n    }); // stops loading screen\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (previousState.selectedBlogId !== this.state.selectedBlogId || this.state.addedArticle === true) {\n      // update article cards - get articles to show up for selected blog\n      axios.get(`https://ethic-blueprint.herokuapp.com/unused_articles/` + this.state.selectedBlogId).then(result => {\n        this.setState(() => ({\n          unaddedArticles: result.data['articles']\n        }));\n        this.setState(() => ({\n          addedArticle: false\n        }));\n      }).catch(() => {\n        this.setState({\n          error: true\n        });\n        this.setState({\n          errorMsg: \"error retreiving unused articles\"\n        });\n      });\n    }\n  }\n\n  render() {\n    // print out if there's an error in the console\n    if (this.state.error) {\n      console.log(this.state.errorMsg);\n    }\n\n    if (this.state.loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"col-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"body\", {\n        className: \"blog-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \" \", this.state.selectedBlog, \" \")), React.createElement(\"div\", {\n        class: \"col-sm\",\n        className: \"blog-selector\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        value: this.state.selectedBlog,\n        onChange: e => this.setState({\n          selectedBlog: e.target.value,\n          validationError: e.target.value === \"\" ? \"Choose a Blog Topic\" : \"\",\n          selectedBlogId: this.getBlogId(e.target.value)\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, this.state.blogs.map(blog => React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \" \", blog, \" \"))))), React.createElement(\"button\", {\n        class: \"update\",\n        onClick: () => this.onUpdate(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \" Update Library \"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"library-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \" \", this.state.unaddedArticles.map((d, id) => {\n        return React.createElement(\"div\", {\n          className: \"article\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        }, React.createElement(MediaCard, {\n          key: d.id,\n          id: d.id,\n          title: d.title,\n          img: d.image_url,\n          url: d.url,\n          blogId: this.state.selectedBlogId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        }));\n      }), \" \")));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/ainakin/Desktop/BLUEPRINT-ETHICS/Ethics-Project/frontend/src/Content.js"],"names":["React","Component","Loading","axios","MediaCard","Header","constructor","props","onUpdate","setState","loading","get","then","result","catch","error","errorMsg","getBlogId","blogname","Object","keys","state","blogTableDict","find","key","blogs","selectedBlog","selectedBlogId","unaddedArticles","addedArticle","componentDidMount","arr","data","map","firstMount","dict","forEach","value","arr2","componentDidUpdate","previousProps","previousState","render","console","log","e","target","validationError","blog","d","id","title","image_url","url"],"mappings":"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","sourcesContent":["import React, { Component\n} from \"react\";\n\nimport Loading from \"./Loading\"\nimport axios from \"axios\";\nimport MediaCard from \"./Card\";\n\nimport \"./content.scss\";\n\n\nexport default class Header extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blogs: [\"\"], // for dropdown\n      selectedBlog: \"\", // for use in header title and other api calls\n      selectedBlogId: 0, // for use in other api calls\n      unaddedArticles: [\"\"], // for article cards\n      blogTableDict: {}, // blogid: blogname\n      loading: true, // for when update is taking place\n      error: false, \n      errorMsg: \"None\",\n      addedArticle: false // flag for when an article is added \n    };\n  }\n\n  // when rescrape is needed\n  onUpdate = () => {\n    this.setState({\n      loading: true\n    }, () => {\n      axios.get(`https://ethic-blueprint.herokuapp.com/scrape_articles`)\n        .then(result => this.setState({\n          loading: false,\n        }))\n        .catch(() => {\n          this.setState({\n            error: true\n          });\n          this.setState({\n            errorMsg: \"error scraping articles\"\n          });\n        });\n    });\n  }\n\n  // get blog id from blog name\n  getBlogId = (blogname) => {\n    return Object.keys(this.state.blogTableDict).find(key => this.state.blogTableDict[key] === blogname);\n  }\n\n  componentDidMount() {\n    // get blog names and corresponding ids\n    axios.get(\"http://ethic-blueprint.herokuapp.com/blogs\")\n      .then((result) => {\n        const arr = Object.keys(result.data).map((key) => [\n          key,\n          result.data[key],\n        ]);\n\n        // set first subtitle to first element in dropdown to initial page\n        this.setState(() => ({\n          selectedBlog: arr[0][1],\n          selectedBlogId: arr[0][0],\n          firstMount: false\n        }));\n        \n\n        // dictionary for blogtable to update state of id and name on dropdown\n        const dict = {};\n        arr.forEach(([key, value]) => dict[key] = value);\n        this.setState(() => ({\n          blogTableDict: dict\n        }))\n\n        // create list of blog names for dropdown\n        const arr2 = Object.keys(result.data).map((key) => result.data[key]);\n        this.setState(() => ({\n          blogs: arr2\n        }));\n        \n        // get articles to show up for selected blog\n        axios.get(`https://ethic-blueprint.herokuapp.com/unused_articles/` + this.state.selectedBlogId)\n          .then(\n            result => {\n              \n              this.setState(() => ({\n                unaddedArticles: result.data['articles']\n              }))\n\n          })\n          .catch(() => {\n            this.setState({\n              error: true\n            });\n            this.setState({\n              errorMsg: \"error retreiving unused articles\"\n            });\n          });\n      })\n      .catch(() => {\n        this.setState({\n          error: true\n        });\n        this.setState({\n          errorMsg: \"error retreiving blogs\"\n        });\n      });\n        \n      // stops loading screen\n      this.setState({\n        loading: false\n      })\n  };\n\n  componentDidUpdate(previousProps, previousState){\n    if (previousState.selectedBlogId !== this.state.selectedBlogId || this.state.addedArticle === true){\n      \n      // update article cards - get articles to show up for selected blog\n      axios.get(`https://ethic-blueprint.herokuapp.com/unused_articles/` + this.state.selectedBlogId)\n          .then(\n            result => {\n              \n              this.setState(() => ({\n                unaddedArticles: result.data['articles']\n              }))\n\n            this.setState(() => ({\n              addedArticle: false\n            }))\n          })\n          .catch(() => {\n            this.setState({\n              error: true\n            });\n            this.setState({\n              errorMsg: \"error retreiving unused articles\"\n            });\n          });\n    }\n\n\n  }\n\n  \nrender() {\n\n    // print out if there's an error in the console\n    if (this.state.error) {\n      console.log(this.state.errorMsg)\n    }\n\n    if (this.state.loading) {\n      return ( <Loading/>)\n    } \n    \n    else {\n      return ( \n        <div>\n          <div className = \"header-container\" >\n              <div class = \"row\" >\n                <div class = \"col-sm\" >\n                  <body className = \"blog-name\" > {this.state.selectedBlog} </body> \n                </div> \n                <div class = \"col-sm\" className = \"blog-selector\" >\n                  <div>\n                    <select value = { this.state.selectedBlog } \n                      onChange = {(e) =>\n                      this.setState({\n                        selectedBlog: e.target.value,\n                        validationError: e.target.value === \"\" ?\n                          \"Choose a Blog Topic\" :\n                          \"\",\n                        selectedBlogId: this.getBlogId(e.target.value)\n                      })}>\n                      {\n                        this.state.blogs.map((blog) => ( \n                          <option> {blog} </option>\n                        ))\n                      } \n                  </select> \n                </div> \n              </div> \n              <button class = \"update\" onClick = {() => this.onUpdate()} > Update Library </button> \n            </div> \n          </div> \n          <div >\n            <div class = \"library-container\" > {\n              this.state.unaddedArticles.map((d, id) => {\n                  return ( \n                    <div className = \"article\">\n                      <MediaCard key = {d.id}\n                      id = {d.id}\n                      title = {d.title}\n                      img = {d.image_url}\n                      url = {d.url}\n                      blogId = {this.state.selectedBlogId}\n                      />\n                    </div>\n              )})} </div> \n          </div>\n      </div>\n      ); \n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}